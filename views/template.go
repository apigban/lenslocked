package views

import (
	"fmt"
	"html/template"
	"io/fs"
	"log"
	"net/http"

	"github.com/gorilla/csrf"
)

func ParseFS(fs fs.FS, patterns ...string) (Template, error) {
	//Initialize csrf definition
	tpl := template.New(patterns[0])

	//Template function needs to use the csrf func generated by gorilla csrf
	tpl = tpl.Funcs(
		template.FuncMap{
			"csrfField": func() template.HTML {
				return `<!-- TODO: Implement the csrfField -->`
			},
		},
	)

	tpl, err := tpl.ParseFS(fs, patterns...)

	if err != nil {
		return Template{}, fmt.Errorf("parseFS %w", err)
	}

	return Template{
		htmlTpl: tpl,
	}, nil
}

func Must(t Template, err error) Template {
	if err != nil {
		panic(err)
	}
	return t
}

// func Parse(filepath string) (Template, error) {
// 	tpl, err := template.ParseFiles(filepath)
// 	if err != nil {
// 		return Template{}, fmt.Errorf("parsing template %w", err)
// 	}

// 	t := Template{
// 		HTMLTpl: tpl,
// 	}

// 	return t, nil
// }

type Template struct {
	htmlTpl *template.Template
}

func (t Template) Execute(w http.ResponseWriter, r *http.Request, data interface{}) {
	// Clone template for each web request
	// needed because r is a pointer to a request
	// avoids modification to template if there are multiple web requests (race conditions are avoided)
	// a copy of the template is generated for each individual web request
	//TODO - alternative, put a lock on the template if it is being used by a request
	tpl, err := t.htmlTpl.Clone()
	if err != nil {
		log.Printf("cloning template: %v, err")
		http.Error(w, "There was an error rendering the page.", http.StatusInternalServerError)
	}

	// Update template to use correct csrf Function
	tpl = tpl.Funcs(
		template.FuncMap{
			"csrfField": func() template.HTML {
				return csrf.TemplateField(r)
			},
		},
	)

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	err = tpl.Execute(w, data)
	if err != nil {
		log.Printf("Executing template %v", err)
		http.Error(w, "There was an error executing the template.", http.StatusInternalServerError)
		return
	}
}
